const dataUrl = 'https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/movie-data.json';
const width = 1000,
      height = 600,
      padding = 50;

let categ = [];

let tooltip = d3.select('body')
  .append('div')
  .style('opacity', 0)
  .attr('id', 'tooltip')
  .attr('class', 'tooltip');


const treemap = d3.treemap()
  .size([width, height])
  .paddingInner(.5); 

const color = d3.scaleOrdinal().range(d3.schemeCategory10); 
const svg = d3.select('.map')
  .append('svg')
  .attr('width', width)
  .attr('height', height);

function treemapDiag (data){
  
 const root = d3.hierarchy(data, (d) => d.children)
 .sum((d) =>  d.value)
 .sort(function(a, b) { return b.height - a.height || b.value - a.value; });
 
 let tree = treemap(root);
  
 const cell  = svg.selectAll("g")
  .data(tree.leaves())
  .enter()
  .append('g')
  .attr('transform',(d) => `translate(${d.x0},${d.y0})`);
 
 // rect 
 const tile = cell.append('rect')
  .attr('class', 'tile')
  .attr("width", (d) => d.x1 - d.x0 )
  .attr('height', (d) => d.y1 - d.y0)
  .style("fill", (d) => color(d.parent.data.name))
  .attr('data-value', (d) => d.data.value)
  .attr('data-name', function(d){
    if(categ.indexOf(d.parent.data.name) < 0){
      categ = categ.concat(d.parent.data.name)
    }
    return d.data.name;
  })
  .attr('data-category', (d) => d.data.category)
  .on('mouseover', function(d){
    tooltip.style('opacity', 0.9)
    tooltip.html(function(){ 
    return `Name: ${d.data.name}<br>
            Category: ${d.data.category}<br>
            Value: ${d.data.value}`
      })
      .attr('data-value', d.data.value)
      .style('left', (d3.event.pageX + 10) +'px')
      .style('top', (d3.event.pageY - 28) + "px")
       
  })
 .on('mouseout', function(d){
   tooltip.style('opacity', 0)
 })
  
  // append text into each rect element
  const text = cell.append('text')
   .attr('class', 'node')
   .selectAll('tspan')
   .data((d) => d.data.name.split(/(?=[A-Z][^A-Z])/g))
   .enter().append('tspan')
   .attr('x',  4)
   .attr('y', (d,i) => 13 + i * 10)
   .text((d)=> d);
  
  
  // legend
  let y = 20
  let x = 150
 const legend = d3.select('.map')
  .append('div')
  .append('svg')
  .attr('id', 'legend')
  .attr('width',1000)
  .attr('height',200)
  //.style('background-color', 'orange');
 
 // append rect element in de legend
 const legendRect = legend.selectAll('circle')
  .data(categ)
  .enter().append('rect')
  .attr('class', 'legend-item')
  .style("fill", (d) => color(d))
  .attr('x', function(d,i){
    if ([1,3,6,9,12,15].indexOf(i)>0) {
      x = 300
      console.log(x)
      return 10 * 5 + x
    }
    else {
      x = x+150
      console.log(x)
      return 10 * 5 + x
    }
  })
  .attr('y', function(d,i){
    if ([1,3,6,9,12,15].indexOf(i)>0) {
      y= y+40
      return y
    }else {
      return y
    }
  })
  .attr('width', 30)
  .attr('height',30);
  
  // append text  beside each rect element
  let tx = 150
  let ty = 20
  const legnedText = legend.selectAll("text")
    .data(categ)
    .enter().append('text')
    .attr('x', function(d,i){
      if ([1,3,6,9,12,15].indexOf(i)>0) {
        tx = 300
        return 10*5+tx+32
      }
      else {
        tx = tx+150
        return 10*5+tx+32
      }
    })
    .attr('y', function(d,i){
      if ([1,3,6,9,12,15].indexOf(i)>0) {
        ty= ty+40
        return ty+20
      }else {
        return ty+20
      }
    })
    .text((d) => d);  
  
}



d3.json(dataUrl, function(error, data){
  if (error) throw error;
	treemapDiag(data);
})
